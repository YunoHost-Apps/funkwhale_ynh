#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
is_public=$YNH_APP_ARG_IS_PUBLIC
admin=$YNH_APP_ARG_ADMIN

app=$YNH_APP_INSTANCE_NAME


#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path="/var/www/$app"
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

test ! "$path_url" != "/" ||  ynh_die 'The path should be "/" for now...'

# Check web path availability
ynh_webpath_available "$domain" "$path_url"
# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" admin "$admin"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
port=$(ynh_find_port 5000)
# Open this port
yunohost firewall allow --no-upnp TCP "$port" 2>&1
ynh_app_setting_set "$app" port "$port"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies build-essential curl ffmpeg \
	libjpeg-dev libmagic-dev libpq-dev postgresql python3-dev python3-venv \
	redis-server libldap2-dev libsasl2-dev \
	`# add arm support` \
	zlib1g-dev libffi-dev libssl-dev

#=================================================
# CREATE A PostgreSQL DATABASE
#=================================================

ynh_psql_test_if_first_run

db_name=$(ynh_sanitize_dbid "$app")
db_user=$db_name
db_pwd=$(ynh_string_random)
# Initialize database and store postgres password for upgrade
ynh_psql_create_db "$db_name" "$db_user" "$db_pwd"
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" psqlpwd "$db_pwd"

systemctl reload postgresql

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"
ynh_setup_source "$final_path" "app-frontend"

(
	cd "$final_path"
	mkdir -p config api data/static data/media data/music front
)

#=================================================
# NGINX CONFIGURATION
#=================================================

# add proxy_cache and connection_upgrade at the beginning of the domain configuration
echo "

proxy_cache_path /tmp/$app-transcode levels=1:2 keys_zone=$app-transcode:10m max_size=1g inactive=7d;

# required for websocket support
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
}
" | cat - "/etc/nginx/conf.d/$domain.conf" > temp && mv temp "/etc/nginx/conf.d/$domain.conf"

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# PYTHON DEPENDENCIES
#=================================================

python3 -m venv "$final_path/virtualenv"
(
	set +o nounset
	source "${final_path}/virtualenv/bin/activate"
	set -o nounset
	pip install --upgrade pip
	pip install --upgrade setuptools
	pip install wheel
	pip install -r "${final_path}/api/requirements.txt"
)

#=================================================
# MODIFY THE CONFIG FILE
#=================================================

configfile="$final_path/config/.env"

cp ../conf/env.prod "$configfile"

key=$(ynh_string_random)
redis_db=$(ynh_redis_get_free_db)

ynh_app_setting_set "$app" key "$key"
ynh_app_setting_set "$app" redis_db "$redis_db"

ynh_replace_string "__REDIS_DB__"  "$redis_db"    "$configfile"
ynh_replace_string "__PORT__"      "$port"        "$configfile"
ynh_replace_string "__DOMAIN__"    "$domain"      "$configfile"
ynh_replace_string "__DBUSER__"    "$db_name"     "$configfile"
ynh_replace_string "__DBPWD__"     "$db_pwd"      "$configfile"
ynh_replace_string "__DBNAME__"    "$app"         "$configfile"
ynh_replace_string "__FINALPATH__" "$final_path"  "$configfile"
ynh_replace_string "__KEY__"       "$key"         "$configfile"

cat > "$final_path/load_env" <<'EOL'
#!/bin/bash
export $(cat "$final_path/config/.env" | grep -v ^# | xargs)
EOL

chmod +x "$final_path/load_env"

#=================================================
# MODIFY THE CONFIG FILE
#=================================================

admin_mail=$(ynh_user_get_info "$admin" "mail")
(
	set +o nounset
	source "${final_path}/virtualenv/bin/activate"
	source "${final_path}/load_env"
	set -o nounset
	cd "$final_path"

	# needed for enabling the 'unaccent' extension
	ynh_psql_execute_as_root "ALTER USER $db_user WITH SUPERUSER;"
	python api/manage.py migrate
	ynh_psql_execute_as_root "ALTER USER $db_user WITH NOSUPERUSER;"
	echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('$admin', '$admin_mail', 'funkwhale') " | python api/manage.py shell
	python api/manage.py collectstatic
)

#=================================================
# SETUP SYSTEMD
#=================================================

cp ../conf/funkwhale.target "/etc/systemd/system/$app.target"
ynh_replace_string "__APP__"    "$app"   "/etc/systemd/system/$app.target"

# Create a dedicated systemd config
ynh_add_systemd_config "$app-server" "funkwhale-server.service"
ynh_add_systemd_config "$app-worker" "funkwhale-worker.service"
ynh_add_systemd_config "$app-beat"   "funkwhale-beat.service"

systemctl restart "$app".target

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R "$app": "$final_path"
chmod -R 755 "$final_path/front/dist/"

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl start "$app-server" "$app-worker" "$app-beat"
systemctl reload nginx