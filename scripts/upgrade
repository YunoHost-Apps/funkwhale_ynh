#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get "$app" domain)
path_url=$(ynh_app_setting_get "$app" path)
is_public=$(ynh_app_setting_get "$app" is_public)
final_path=$(ynh_app_setting_get "$app" final_path)
db_name=$(ynh_app_setting_get "$app" db_name)
db_user=$db_name
port=$(ynh_app_setting_get "$app" port)
db_pwd=$(ynh_app_setting_get "$app" psqlpwd)
redis_db=$(ynh_app_setting_get "$app" redis_db)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If redis_db doesn't exist, create it
if [ -z "$redis_db" ]; then
	redis_db=0
	ynh_app_setting_set "$app" redis_db "$redis_db"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"
ynh_setup_source "$final_path" "app-frontend"

(
	cd "$final_path"
	mkdir -p config api data/static data/media data/music front
)

#=================================================
# NGINX CONFIGURATION
#=================================================

# change the global configuration
# remove domain specific configuration
tail -n +11 "/etc/nginx/conf.d/$domain.conf" > "/etc/nginx/conf.d/$domain.conf.temp"
mv "/etc/nginx/conf.d/$domain.conf.temp" "/etc/nginx/conf.d/$domain.conf"

# add proxy_cache and connection_upgrade at the beginning of the domain configuration
echo "

proxy_cache_path /tmp/$app-transcode levels=1:2 keys_zone=$app-transcode:10m max_size=1g inactive=7d;

# required for websocket support
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
}
" | cat - "/etc/nginx/conf.d/$domain.conf" > temp && mv temp "/etc/nginx/conf.d/$domain.conf"

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies build-essential curl ffmpeg \
	libjpeg-dev libmagic-dev libpq-dev postgresql python3-dev python3-venv \
	redis-server \
	`# add arm support` \
	zlib1g-dev libffi-dev libssl-dev

#=================================================
# SPECIFIC UPGRADE
#=================================================
# PYTHON DEPENDENCIES
#=================================================

python3 -m venv "$final_path/virtualenv"
(
	set +o nounset
	source "${final_path}/virtualenv/bin/activate"
	set -o nounset
	pip install --upgrade pip
	pip install --upgrade setuptools
	pip install wheel
	pip install -r "${final_path}/api/requirements.txt"

	# https://code.eliotberriot.com/funkwhale/funkwhale/tags/0.16
	pip uninstall django-cacheops --yes
)

#=================================================
# MODIFY THE CONFIG FILE
#=================================================

configfile="$final_path/config/.env"

cp ../conf/env.prod "$configfile"

key=$(ynh_string_random)

ynh_app_setting_set "$app" key "$key"

ynh_replace_string "__REDIS_DB__"  "$redis_db"    "$configfile"
ynh_replace_string "__PORT__"      "$port"        "$configfile"
ynh_replace_string "__DOMAIN__"    "$domain"      "$configfile"
ynh_replace_string "__DBUSER__"    "$db_name"     "$configfile"
ynh_replace_string "__DBPWD__"     "$db_pwd"      "$configfile"
ynh_replace_string "__DBNAME__"    "$app"         "$configfile"
ynh_replace_string "__FINALPATH__" "$final_path"  "$configfile"
ynh_replace_string "__KEY__"       "$key"         "$configfile"

cat > "$final_path/load_env" <<'EOL'
#!/bin/bash
export $(cat "$final_path/config/.env" | grep -v ^# | xargs)
EOL

chmod +x "$final_path/load_env"

#=================================================
# MIGRATE
#=================================================

(
	set +o nounset
	source "${final_path}/virtualenv/bin/activate"
	source "${final_path}/load_env"
	set -o nounset
	cd "$final_path"

	# needed for enabling the 'unaccent' extension
	ynh_psql_execute_as_root "ALTER USER $db_user WITH SUPERUSER;"
	python api/manage.py migrate
	ynh_psql_execute_as_root "ALTER USER $db_user WITH NOSUPERUSER;"

	python api/manage.py collectstatic --clear --noinput

	# https://code.eliotberriot.com/funkwhale/funkwhale/tags/0.16 # users-now-have-an-activitypub-actor-manual-action-required
	python api/manage.py script create_actors --no-input
	# https://code.eliotberriot.com/funkwhale/funkwhale/tags/0.16 #image-thumbnails-manual-action-required
	python api/manage.py script create_image_variations --no-input

	python api/manage.py script migrate_to_user_libraries --no-input
)

#=================================================
# SETUP SYSTEMD
#=================================================

cp ../conf/funkwhale.target "/etc/systemd/system/$app.target"
ynh_replace_string "__APP__"    "$app"   "/etc/systemd/system/$app.target"

# Create a dedicated systemd config
ynh_add_systemd_config "$app-server" "funkwhale-server.service"
ynh_add_systemd_config "$app-worker" "funkwhale-worker.service"
ynh_add_systemd_config "$app-beat"   "funkwhale-beat.service"

systemctl restart "$app".target

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R "$app": "$final_path"
chmod -R 755 "$final_path/front/dist/"

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx